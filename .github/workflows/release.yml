# .github/workflows/release.yml
# Workflow name
name: Release Build and Publish

# Controls when the workflow will run
on:
  push:
    tags:
      - 'v*.*.*' # Trigger on tags like v1.0.0, v2.3.4 etc.

# Permissions needed by the workflow
permissions:
  contents: write # Needed to create releases, upload release assets

# Default settings for all jobs
defaults:
  run:
    shell: bash

# Environment variables available to all jobs
env:
  # Fail the build if there are warnings
  RUSTFLAGS: --deny warnings
  # Set the binary name of your crate here
  BINARY_NAME: "lowrisc"

jobs:
  # Optional: Job to check if the tag is a pre-release or full release
  check_release_type:
    name: Check Release Type
    runs-on: ubuntu-latest
    outputs:
      is_prerelease: ${{ steps.check_tag.outputs.is_prerelease }}
      tag_name: ${{ steps.check_tag.outputs.tag_name }}
    steps:
      - name: Check tag format
        id: check_tag
        run: |
          TAG_NAME="${{ github.ref_name }}"
          echo "Tag received: $TAG_NAME"
          # Simple check: if tag contains a hyphen like '-rc', '-beta', it's a prerelease
          if [[ "$TAG_NAME" == *"-"* ]]; then
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
            echo "Detected prerelease: $TAG_NAME"
          else
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
            echo "Detected full release: $TAG_NAME"
          fi
          # Output the tag name for use in artifact naming
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"

  # Job to build the crate for various targets and upload assets
  build_package:
    name: Build for ${{ matrix.target }}
    # Requires the release type check to complete first
    needs: [check_release_type]
    # Run on the OS specified in the matrix
    runs-on: ${{ matrix.os }}
    # Define the build matrix
    strategy:
      fail-fast: false # Don't cancel all jobs if one fails
      matrix:
        target:
          # Linux
          - x86_64-unknown-linux-musl # x86_64, static linking
          - aarch64-unknown-linux-musl # ARM64, static linking
          - riscv64gc-unknown-linux-gnu # RISC-V 64 (using gnu, static linking harder)
          # Windows
          - x86_64-pc-windows-msvc    # x86_64
          - aarch64-pc-windows-msvc   # ARM64
          # macOS
          - x86_64-apple-darwin       # Intel
          - aarch64-apple-darwin      # Apple Silicon
        include:
          # Linux runners
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
          - target: riscv64gc-unknown-linux-gnu
            os: ubuntu-latest
          # Windows runners
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: aarch64-pc-windows-msvc
            os: windows-latest
          # macOS runners
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest

    steps:
      # 1. Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # 3. Install cross-compilation dependencies (Linux only)
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          if [[ "${{ matrix.target }}" == *"-musl" ]]; then
            sudo apt-get install -y musl-tools
          fi
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
            echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          elif [[ "${{ matrix.target }}" == "riscv64gc-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-riscv64-linux-gnu
            echo "CARGO_TARGET_RISCV64GC_UNKNOWN_LINUX_GNU_LINKER=riscv64-linux-gnu-gcc" >> $GITHUB_ENV
          fi

      # 4. Build the binary
      - name: Build binary
        run: cargo build --verbose --release --target ${{ matrix.target }}
        env:
           RUSTFLAGS: ${{ (contains(matrix.target, 'pc-windows-msvc') && format('{0} -C target-feature=+crt-static', env.RUSTFLAGS)) || env.RUSTFLAGS }}

      # 5. Prepare package artifacts (archive the binary)
      - name: Prepare package artifacts
        id: prepare_package
        shell: bash
        run: |
          TARGET="${{ matrix.target }}"
          TAG_NAME="${{ needs.check_release_type.outputs.tag_name }}"
          STAGING_DIR="staging"
          ARCHIVE_NAME="${{ env.BINARY_NAME }}-${TAG_NAME}-${TARGET}"
          SRC_DIR="target/$TARGET/release"
          EXE_SUFFIX=""

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            EXE_SUFFIX=".exe"
          fi
          SRC_PATH="$SRC_DIR/${{ env.BINARY_NAME }}$EXE_SUFFIX"

          echo "Looking for binary at: $SRC_PATH"
          if [[ ! -f "$SRC_PATH" ]]; then
            echo "Error: Binary not found!"
            ls -R "$SRC_DIR" || echo "Could not list $SRC_DIR"
            exit 1
          fi
          echo "Binary found."

          mkdir -p "$STAGING_DIR"
          cp "$SRC_PATH" "$STAGING_DIR/"
          [[ -f "README.md" ]] && cp "README.md" "$STAGING_DIR/"
          [[ -f "LICENSE" ]] && cp "LICENSE" "$STAGING_DIR/"

          ARCHIVE_PATH=""
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ARCHIVE_PATH="$ARCHIVE_NAME.zip"
            powershell Compress-Archive -Path "$STAGING_DIR/*" -DestinationPath "$ARCHIVE_PATH"
          else
            ARCHIVE_PATH="$ARCHIVE_NAME.tar.gz"
            tar czvf "$ARCHIVE_PATH" -C "$STAGING_DIR" .
          fi
          echo "Created archive: $ARCHIVE_PATH"
          echo "archive_path=$ARCHIVE_PATH" >> "$GITHUB_OUTPUT"

      # 6. Create Release / Upload Asset using softprops/action-gh-release
      - name: Create/Update Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check_release_type.outputs.tag_name }}
          files: ${{ steps.prepare_package.outputs.archive_path }}
          draft: true # Keep as draft until the final publish job
          prerelease: ${{ needs.check_release_type.outputs.is_prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  # Job to finalize the release: create checksums, upload them, and publish the release
  publish_release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [check_release_type, build_package]
    steps:
      # 1. Checkout code - Added this step
      # This is needed so that gh release edit can access git context
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Install GitHub CLI
      - name: Install GitHub CLI
        run: |
          if ! command -v gh &> /dev/null; then
             echo "GitHub CLI not found, installing..."
             sudo apt-get update && sudo apt-get install -y gh
          fi

      # 3. Download all release assets (uploaded by build_package jobs)
      - name: Download Release Assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.check_release_type.outputs.tag_name }}
        run: |
          mkdir release-assets
          cd release-assets
          echo "Downloading assets for tag $TAG_NAME from ${{ github.repository }}..."
          # Use gh release download which should handle draft releases correctly
          gh release download "$TAG_NAME" --repo "${{ github.repository }}" --pattern '*'
          echo "Download complete. Files:"
          ls -l

      # 4. Generate SHA256 checksums
      - name: Create Checksums File
        id: checksum # Give this step an id
        run: |
          cd release-assets
          CHECKSUM_FILE="../SHA256SUMS"
          # Handle case where no assets were downloaded (e.g., build failure)
          if [ -z "$(ls -A .)" ]; then
             echo "No assets found to checksum."
             touch "$CHECKSUM_FILE"
             echo "checksum_created=false" >> "$GITHUB_OUTPUT"
          else
             sha256sum ./* > "$CHECKSUM_FILE"
             echo "Generated SHA256SUMS file:"
             cat "$CHECKSUM_FILE"
             echo "checksum_created=true" >> "$GITHUB_OUTPUT"
          fi

      # 5. Upload Checksums and Publish Release using GitHub CLI
      # Renumbered step from 4 to 5
      - name: Upload Checksums and Publish Release (using gh)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.check_release_type.outputs.tag_name }}
        run: |
          # Upload checksums file only if it was created and contains checksums
          if [[ "${{ steps.checksum.outputs.checksum_created }}" == "true" ]]; then
            echo "Uploading checksums..."
            # Use correct path relative to workspace: SHA256SUMS
            gh release upload "$TAG_NAME" SHA256SUMS --clobber
          else
            echo "Skipping checksum upload as no assets were found."
          fi

          # Publish the release (make it non-draft)
          echo "Publishing release..."
          gh release edit "$TAG_NAME" --draft=false
